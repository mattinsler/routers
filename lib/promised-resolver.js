"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleError = handleError;

exports.default = function (resolve) {
  return function (handler) {
    if (resolve) {
      handler = resolve(handler);
    }

    if (handler.length > 2) {
      return handler;
    }

    return function (req, res, next) {
      Promise.resolve(handler(req, res)).then(function (data) {
        res.json(data);
      }, function (err) {
        handleError(err, req, res, next);
      });
    };
  };
};

exports.default = function (resolve) {
  return function (handler) {
    if (resolve) {
      handler = resolve(handler);
    }

    if (handler.length > 2) {
      return handler;
    }

    return function (req, res, next) {
      Promise.resolve(handler(req, res)).then(function (data) {
        res.json(data);
      }, function (err) {
        if (err.isBoom) {
          var payload = err.output.payload;

          res.status(payload.statusCode);
          res.json({
            status: payload.statusCode,
            error: payload.error,
            message: payload.message
          });
        } else {
          res.status(500);
          res.json({
            message: err.message
          });
        }
      });
    };
  };
};

function handleError(err, req, res, next) {
  if (err.isBoom) {
    var payload = err.output.payload;

    res.status(payload.statusCode);
    res.json({
      status: payload.statusCode,
      error: payload.error,
      message: payload.message
    });
  } else {
    res.status(500);
    res.json({
      message: err.message
    });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9taXNlZC1yZXNvbHZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQUFnQjs7a0JBaUJELFVBQVMsT0FBVCxFQUFrQjtBQUMvQixTQUFPLFVBQVMsT0FBVCxFQUFrQjtBQUN2QixRQUFJLE9BQUosRUFBYTtBQUNYLGdCQUFVLFFBQVEsT0FBUixDQUFWLENBRFc7S0FBYjs7QUFJQSxRQUFJLFFBQVEsTUFBUixHQUFpQixDQUFqQixFQUFvQjtBQUFFLGFBQU8sT0FBUCxDQUFGO0tBQXhCOztBQUVBLFdBQU8sVUFBUyxHQUFULEVBQWMsR0FBZCxFQUFtQixJQUFuQixFQUF5QjtBQUM5QixjQUFRLE9BQVIsQ0FBZ0IsUUFBUSxHQUFSLEVBQWEsR0FBYixDQUFoQixFQUFtQyxJQUFuQyxDQUF3QyxVQUFDLElBQUQsRUFBVTtBQUNoRCxZQUFJLElBQUosQ0FBUyxJQUFULEVBRGdEO09BQVYsRUFFckMsVUFBQyxHQUFELEVBQVM7QUFDVixvQkFBWSxHQUFaLEVBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLEVBQTJCLElBQTNCLEVBRFU7T0FBVCxDQUZILENBRDhCO0tBQXpCLENBUGdCO0dBQWxCLENBRHdCO0NBQWxCOztrQkFvQkEsVUFBUyxPQUFULEVBQWtCO0FBQy9CLFNBQU8sVUFBUyxPQUFULEVBQWtCO0FBQ3ZCLFFBQUksT0FBSixFQUFhO0FBQ1gsZ0JBQVUsUUFBUSxPQUFSLENBQVYsQ0FEVztLQUFiOztBQUlBLFFBQUksUUFBUSxNQUFSLEdBQWlCLENBQWpCLEVBQW9CO0FBQUUsYUFBTyxPQUFQLENBQUY7S0FBeEI7O0FBRUEsV0FBTyxVQUFTLEdBQVQsRUFBYyxHQUFkLEVBQW1CLElBQW5CLEVBQXlCO0FBQzlCLGNBQVEsT0FBUixDQUFnQixRQUFRLEdBQVIsRUFBYSxHQUFiLENBQWhCLEVBQW1DLElBQW5DLENBQXdDLFVBQUMsSUFBRCxFQUFVO0FBQ2hELFlBQUksSUFBSixDQUFTLElBQVQsRUFEZ0Q7T0FBVixFQUVyQyxVQUFDLEdBQUQsRUFBUztBQUNWLFlBQUksSUFBSSxNQUFKLEVBQVk7Y0FDVCxVQUFXLElBQUksTUFBSixDQUFYLFFBRFM7O0FBRWQsY0FBSSxNQUFKLENBQVcsUUFBUSxVQUFSLENBQVgsQ0FGYztBQUdkLGNBQUksSUFBSixDQUFTO0FBQ1Asb0JBQVEsUUFBUSxVQUFSO0FBQ1IsbUJBQU8sUUFBUSxLQUFSO0FBQ1AscUJBQVMsUUFBUSxPQUFSO1dBSFgsRUFIYztTQUFoQixNQVFPO0FBQ0wsY0FBSSxNQUFKLENBQVcsR0FBWCxFQURLO0FBRUwsY0FBSSxJQUFKLENBQVM7QUFDUCxxQkFBUyxJQUFJLE9BQUo7V0FEWCxFQUZLO1NBUlA7T0FEQyxDQUZILENBRDhCO0tBQXpCLENBUGdCO0dBQWxCLENBRHdCO0NBQWxCOztBQXJDUixTQUFTLFdBQVQsQ0FBcUIsR0FBckIsRUFBMEIsR0FBMUIsRUFBK0IsR0FBL0IsRUFBb0MsSUFBcEMsRUFBMEM7QUFDL0MsTUFBSSxJQUFJLE1BQUosRUFBWTtRQUNULFVBQVcsSUFBSSxNQUFKLENBQVgsUUFEUzs7QUFFZCxRQUFJLE1BQUosQ0FBVyxRQUFRLFVBQVIsQ0FBWCxDQUZjO0FBR2QsUUFBSSxJQUFKLENBQVM7QUFDUCxjQUFRLFFBQVEsVUFBUjtBQUNSLGFBQU8sUUFBUSxLQUFSO0FBQ1AsZUFBUyxRQUFRLE9BQVI7S0FIWCxFQUhjO0dBQWhCLE1BUU87QUFDTCxRQUFJLE1BQUosQ0FBVyxHQUFYLEVBREs7QUFFTCxRQUFJLElBQUosQ0FBUztBQUNQLGVBQVMsSUFBSSxPQUFKO0tBRFgsRUFGSztHQVJQO0NBREsiLCJmaWxlIjoicHJvbWlzZWQtcmVzb2x2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICBpZiAoZXJyLmlzQm9vbSkge1xuICAgIGxldCB7cGF5bG9hZH0gPSBlcnIub3V0cHV0O1xuICAgIHJlcy5zdGF0dXMocGF5bG9hZC5zdGF0dXNDb2RlKTtcbiAgICByZXMuanNvbih7XG4gICAgICBzdGF0dXM6IHBheWxvYWQuc3RhdHVzQ29kZSxcbiAgICAgIGVycm9yOiBwYXlsb2FkLmVycm9yLFxuICAgICAgbWVzc2FnZTogcGF5bG9hZC5tZXNzYWdlXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICByZXMuc3RhdHVzKDUwMCk7XG4gICAgcmVzLmpzb24oe1xuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyZXNvbHZlKSB7XG4gIHJldHVybiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgaWYgKHJlc29sdmUpIHtcbiAgICAgIGhhbmRsZXIgPSByZXNvbHZlKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGlmIChoYW5kbGVyLmxlbmd0aCA+IDIpIHsgcmV0dXJuIGhhbmRsZXI7IH1cblxuICAgIHJldHVybiBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKGhhbmRsZXIocmVxLCByZXMpKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIHJlcy5qc29uKGRhdGEpO1xuICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIHJlcSwgcmVzLCBuZXh0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBpZiAocmVzb2x2ZSkge1xuICAgICAgaGFuZGxlciA9IHJlc29sdmUoaGFuZGxlcik7XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZXIubGVuZ3RoID4gMikgeyByZXR1cm4gaGFuZGxlcjsgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoaGFuZGxlcihyZXEsIHJlcykpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgcmVzLmpzb24oZGF0YSk7XG4gICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIuaXNCb29tKSB7XG4gICAgICAgICAgbGV0IHtwYXlsb2FkfSA9IGVyci5vdXRwdXQ7XG4gICAgICAgICAgcmVzLnN0YXR1cyhwYXlsb2FkLnN0YXR1c0NvZGUpO1xuICAgICAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgICAgIHN0YXR1czogcGF5bG9hZC5zdGF0dXNDb2RlLFxuICAgICAgICAgICAgZXJyb3I6IHBheWxvYWQuZXJyb3IsXG4gICAgICAgICAgICBtZXNzYWdlOiBwYXlsb2FkLm1lc3NhZ2VcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKTtcbiAgICAgICAgICByZXMuanNvbih7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4iXX0=